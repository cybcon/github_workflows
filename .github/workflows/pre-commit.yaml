name: pre-commit
on:
  workflow_call:
    inputs:
      full_precommit:
        description: Defines whether a full pre-commit scan should be performed (cli option -a) or not
        type: boolean
        required: false
        default: true
jobs:
  setup:
    name: Setup
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Get hooks
        id: hooks
        run: echo "hooks=$(yq e '[.repos[].hooks[].id] | @json' .pre-commit-config.yaml)" >> $GITHUB_OUTPUT
    outputs:
      hooks: ${{ steps.hooks.outputs.hooks }}
  hook:
    name: Run hook
    runs-on: ubuntu-22.04
    needs: setup
    strategy:
      matrix:
        hook: ${{ fromJSON(needs.setup.outputs.hooks) }}
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Cache asdf
        id: cache
        uses: actions/cache@v3
        with:
          path: /home/runner/.asdf
          key: ${{ runner.os }}-${{ hashFiles('**/.tool-versions') }}
      - name: Install
        if: steps.cache.outputs.cache-hit != 'true'
        uses: asdf-vm/actions/install@v2.2.0
        with:
          # Normally, this action would just install the versions of the .tool-versions file in the root directory of the repository.
          # As we also have .tool-versions files in subdirectories, pre-commit hooks would fail if versions in these files differ from
          # the ones specified in the .tool-versions file in the root directory of this repository.
          before_install: find . -name ".tool-versions" -exec bash -c 'while read line; do asdf install ${line}; done < ${0}' {} \;
      - name: Run ${{ matrix.hook }} hook (full repo scan)
        if: inputs.full_precommit
        # The asdf setup is required when restoring from cache
        run: |
          . /home/runner/.asdf/asdf.sh
          pre-commit run -a ${{ matrix.hook }}
      - name: Run ${{ matrix.hook }} hook (scan difference to default branch)
        if: ${{ ! inputs.full_precommit }}
        #
        # The asdf setup is required when restoring from cache
        run: |
          . /home/runner/.asdf/asdf.sh

          # extract the delta
          git_url=${{ github.event.pull_request.base.repo.clone_url }}
          # get the GITs default branch name
          default_branch=${{ github.event.repository.default_branch }}
          echo "DEBUG: The repos default branch name is: ${default_branch}"
          # get the branch nam,e of the current branch we want to check
          pr_branch=${{ github.event.pull_request.head.ref }}
          echo "DEBUG: The current branch is: ${pr_branch}"

          # Generate a new working direcory, based on the current GitHub workspace
          BASEDIR=$(dirname ${GITHUB_WORKSPACE})
          WORKDIR="${BASEDIR}/pre-commit-test"
          mkdir -p ${WORKDIR} || exit 1
          cd ${WORKDIR} || exit 1

          # cloning the GIT repository
          echo "DEBUG: Cloning ${{ github.event.pull_request.base.repo.clone_url }} in $(pwd)"
          git clone ${{ github.event.pull_request.base.repo.clone_url }} . || exit 1
          # get the revision of default branch
          echo "DEBUG: Get revision of the default branch"
          revision=$(git rev-parse origin/${default_branch})
          echo "DEBUG: Revision of origin/${default_branch} is: ${revision}"

          # Switch to the PR branch
          echo "DEBUG: Switch to the pull request branch: ${pr_branch}"
          git checkout ${pr_branch} || exit 1
          # Reset the branch to default branch revision
          echo "DEBUG Do a soft reset to revision: ${revision}"
          git reset --soft ${revision} || exit 1

          # add the changes, so we get the differences into the commit
          echo "DEBUG: Adding all changes to stage the delta"
          git add . || exit 1

          # validate if there are only removals inside the commit
          removals_only='false'
          if [ $(git status -s | awk '{print $1}' | sort | uniq | egrep -v 'D' | wc -l) -eq 0 ]; then
            removals_only='true'
            echo "DEBUG: This branch contains only removals of files."
          fi

          # validate if the current matrix job is a checkov scan
          is_checkov='false'
          if [ ! -z "echo ${{ matrix.hook }} | grep -i checkov" ]; then
            is_checkov='true'
            echo "DEBUG: Detecting a checkov scan (${{ matrix.hook }})."
          fi

          # if there are only removals, checkov will fail - we will skip all checkov checks on removals only
          if [ "${is_checkov}" == "true" -a "${removals_only}" == "true" ]; then
            echo "INFO: Skip pre-commit run ${{ matrix.hook }}, because there are only removal of files and checkov would fail here!"
            RC=0
          else
            pre-commit run ${{ matrix.hook }}
            RC="${?}"
          fi
          # Go back to the GitHub workspace
          cd ${GITHUB_WORKSPACE} || exit 1
          # remove the rtemporare workdir
          rm -rf ${WORKDIR} || exit 1

          # exit step with RC of the pre-commit run
          exit ${RC}

      - name: Add summary on success
        if: ${{ success() }}
        run: |
          echo "### :white_check_mark: ${{ matrix.hook }} succeeded" >> $GITHUB_STEP_SUMMARY
      - name: Add summary on failure
        if: ${{ failure() }}
        run: |
          echo "### :x: ${{ matrix.hook }} failed" >> $GITHUB_STEP_SUMMARY
          echo -e "\`\`\`diff\n$(git diff)\n\`\`\`" >> $GITHUB_STEP_SUMMARY
